# Function to secure /tmp and /var/tmp folders
secure_tmp_folders() {
    log "${BLUE}Securing /tmp and /var/tmp folders${NC}"

    # Create a tmpfs mount for /tmp with proper permissions and dynamic size
    if mount -t tmpfs -o noexec,nosuid,rw tmpfs /tmp >> "$LOG_FILE" 2>&1; then
        chmod 1777 /tmp >> "$LOG_FILE" 2>&1 || { log "${RED}Error setting permissions for /tmp.${NC}"; exit 1; }
    else
        log "${RED}Error creating tmpfs mount for /tmp.${NC}"
        exit 1
    fi

    # Move /var/tmp to /tmp and create symlink
    mv /var/tmp /var/tmpold >> "$LOG_FILE" 2>&1 || { log "${RED}Error moving /var/tmp to /var/tmpold.${NC}"; exit 1; }
    ln -s /tmp /var/tmp >> "$LOG_FILE" 2>&1 || { log "${RED}Error creating symlink for /var/tmp.${NC}"; exit 1; }
    cp -prf /var/tmpold/* /tmp/ >> "$LOG_FILE" 2>&1 || { log "${RED}Error copying files from /var/tmpold to /tmp.${NC}"; exit 1; }

    # Update /etc/fstab for persistent mount
    if ! echo "tmpfs /tmp tmpfs defaults,noexec,nosuid,rw 0 0" >> /etc/fstab >> "$LOG_FILE" 2>&1; then
        log "${RED}Error updating /etc/fstab.${NC}"
        exit 1
    fi

    log "${BLUE}Securing /tmp and /var/tmp folders: ${GREEN}DONE${NC}"
    echo -e "${BLUE}Securing /tmp and /var/tmp folders: ${GREEN}DONE${NC}" >> report.txt
}
